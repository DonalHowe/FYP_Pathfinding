
OverView:

main classes
	grid - the grid which stores cells and will run the pathfinding 
		- inside grid you will have a star and d star funcs 
			
	cell/node - this is what each node will contain i.e marked, x/y pos etc
	gameManager - this game manager will basically contol where blocks/ obstructions are placed it will also know which cells are affected so it will pass
			this information to d star only if the path is affected
			
		key: if the path is infected the game manager will only pass the information through to the dstar within a certain range i.e say 6 cells away
			this for one stops the uneccessary overhead of storage required for dtar on in a massive grid 
			Draw back is that it may have to do a drastic change in direction

			or i could have dstar check every 5 cells ahead though there is a possibility for it to miss the obstruction 
			
			the game manager will also control the storage of results for instance it will store the data into the sql database where they will be sorted by 
			big O notation 

	Game - runs the file basically wont do much more else bar setup how and when these things a run 

https://www.cs.cmu.edu/~motionplanning/lecture/AppH-astar-dstar_howie.pdf





/////
The D* algorithm is a pathfinding algorithm that is similar to the A* algorithm. However, the D* algorithm is able to update the path as the environment changes, 
whereas the A* algorithm can only find a path from a starting point to a fixed goal.

To accomplish this, the D* algorithm maintains two sets of nodes: the first set is the "open" set, which contains the nodes that have been visited but not yet expanded, 
and the second set is the "closed" set, which contains the nodes that have been fully expanded. 
The D* algorithm uses a cost function to evaluate the cost of moving from one node to another, and it expands the node in the open set with the lowest cost.

The "raise" and "lower" functions are used in the D* algorithm to update the cost of a node when the environment changes. 
The "raise" function is used to increase the cost of a node, and the "lower" function is used to decrease the cost of a node. 
This allows the D* algorithm to adapt to changes in the environment and find a new, optimal path.

Overall, the D* algorithm is a powerful tool for pathfinding in dynamic environments. It is able to find the optimal path even when the environment changes,
 making it well-suited for applications such as robot navigation.








/// my thought process for each step

Initialize the starting point and the ending point of the path, and set the cost of the starting point to 0.

Create a priority queue to store the nodes that have been visited. The priority of each node is determined by its cost.

Add the starting node to the priority queue, and mark it as visited.

While the priority queue is not empty, do the following:

Remove the node with the lowest cost from the priority queue.

If the removed node is the ending point, then stop the algorithm and return the path from the starting point to the ending point.

Otherwise, consider each of the neighbors of the removed node and calculate the cost of reaching that neighbor.
If the calculated cost is lower than the current cost of the neighbor, update the cost of the neighbor and add it to the priority queue.
If the priority queue becomes empty without finding the ending point, then return "no path found".
